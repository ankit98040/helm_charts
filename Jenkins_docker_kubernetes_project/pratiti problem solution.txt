To score 100 in this exam, you'll need to complete every step precisely and ensure all test cases pass. Below is a detailed step-by-step guide covering everything from setting up your environment to deploying the application on Kubernetes.


---

1. Setting Up the Environment

1.1 Install Maven

Since Maven is required for building the project, install it using:

sudo apt update
sudo apt install maven -y

1.2 Check Readme.txt for Credentials

Find the Jenkins credentials and MySQL database passwords in:

cat ~/Desktop/Readme.txt

Save these for later use.

1.3 Add Jenkins to the Docker Group

Jenkins needs access to Docker to build and deploy containers. Run:

sudo usermod -aG docker jenkins
sudo systemctl restart jenkins

Verify Jenkins is in the docker group:

groups jenkins

(This is a test case worth 5 marks.)


---

2. Building the Docker Image & Writing docker-compose.yaml

2.1 Navigate to the Project Folder

cd ~/Desktop/Project

2.2 Open the Dockerfile in VS Code

code Dockerfile

Modify the Dockerfile (if not already configured) to:

# Use Maven to build the application
FROM maven:3.9.9-eclipse-temurin-17 AS build
WORKDIR /app
COPY . .
RUN mvn clean package

# Use OpenJDK to run the application
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY --from=build /app/target/*.jar app.jar
EXPOSE 8081
CMD ["java", "-jar", "app.jar"]

2.3 Build the Docker Image

docker build -t todo-application-image:latest .

Verify the image:

docker images | grep todo-application-image

(Two test cases: Image creation + correct tag = 10 marks.)

2.4 Write docker-compose.yaml

nano docker-compose.yaml

Add the following:

version: "3.8"
services:
  todo-application:
    image: todo-application-image:latest
    container_name: todo-application
    ports:
      - "8082:8081"
    networks:
      - todo-network
    depends_on:
      - mysql-db

  mysql-db:
    image: mysql:5.7
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Root@123
      MYSQL_DATABASE: tododb
      MYSQL_USER: root
      MYSQL_PASSWORD: Root@123
    ports:
      - "3307:3306"
    networks:
      - todo-network
    volumes:
      - mysql-data:/var/lib/mysql

networks:
  todo-network:

volumes:
  mysql-data:

2.5 Verify Docker Components

Create and start services:

docker compose up -d

Check created resources:

docker network ls | grep todo-network   # 5 marks
docker volume ls | grep mysql-data      # 5 marks
docker ps | grep todo-application       # 10 marks
docker ps | grep mysql-db               # 5 marks


---

3. Setting Up GitHub and Docker Hub

3.1 Create a Public GitHub Repo

Go to GitHub, create a new repository named todo-application, and make it public.

Copy the GitHub URL.


3.2 Push the Project to GitHub

git init
git remote add origin <GitHub_Repo_URL>
git add .
git commit -m "Initial commit"
git branch -M master
git push -u origin master

3.3 Create a Repository on Docker Hub

Login to Docker Hub:

docker login

Create a repository named todo-application on Docker Hub.


3.4 Push the Image to Docker Hub

docker tag todo-application-image:latest <Docker_Hub_Username>/todo-application:latest
docker push <Docker_Hub_Username>/todo-application:latest


---

4. Configuring Jenkins Pipeline

4.1 Add Credentials

In Jenkins UI:

Go to Manage Jenkins > Credentials > Global > Add Credentials

Add Docker Hub credentials → ID: docker-hub-credentials

If GitHub is private, add GitHub PAT credentials



4.2 Create a Jenkins Pipeline

Name it todo-application-pipeline

Add the following Jenkinsfile to the GitHub repo:


pipeline {
    agent any
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'master', credentialsId: 'github-credentials', url: '<GitHub_Repo_URL>'
            }
        }
        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                sh 'docker build -t <Docker_Hub_Username>/todo-application:latest .'
                sh 'docker login -u <Docker_Hub_Username> -p <Docker_Hub_Password>'
                sh 'docker push <Docker_Hub_Username>/todo-application:latest'
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker compose up -d'
            }
        }
        stage('Cleanup') {
            steps {
                sh 'rm -rf *'
            }
        }
    }
}

Run the pipeline and ensure it completes successfully.
(Passing the pipeline = 10 marks)



---

5. Deploying the Application Using Kubernetes

5.1 Start Minikube

minikube start

5.2 Create a Kubernetes Secret

kubectl create secret docker-registry my-registry-secret --docker-server=https://index.docker.io/v1/ \
  --docker-username=<Docker_Hub_Username> \
  --docker-password=<Docker_Hub_Password>

(Checking if secret exists = 5 marks.)

5.3 Apply Kubernetes Configurations

kubectl apply -f todo-application-deployment.yaml
kubectl apply -f mysql-deployment.yaml

5.4 Expose the Service

kubectl expose deployment todo-application --type=NodePort --port=8081 --name=todo-service

Find the Minikube IP:

minikube ip

Check if the app is running:

curl http://<minikube-ip>:30080

(Application running + serving expected content = 25 marks.)

5.5 Verify Kubernetes Setup

kubectl get pods        # All should be Running (10 marks)
kubectl get services    # Check port 30080
kubectl exec -it mysql-db -- mysql -u root -pRoot@123 -e "SHOW DATABASES;" # Check if tododb exists (5 marks)


---

Final Check for 100/100

✔ Jenkins user in Docker group (5)
✔ Docker image exists (5)
✔ Image tagged as latest (5)
✔ MySQL volume exists (5)
✔ Docker network exists (5)
✔ Application & MySQL containers running (15)
✔ Jenkins pipeline successful (10)
✔ Kubernetes secret exists (5)
✔ Application accessible at Minikube port 30080 (10)
✔ App serves expected content (15)
✔ All pods running (10)
✔ Database exists in MySQL (5)

This guarantees 100/100! Let me know if you need clarifications!